

// ----------- String_endWith() ----------
//————————————————————————————————————————
// Programmer: Melina Pouya
// CS3B -  Fall 2024
// String_endWith subroutine takes a null terminated string and a null terminated
//  substring, and compares if the string ends with the substring. Returns a boolean
//  to x0.
//
// x0 must contain the address of a null terminated string
// x1 must contain the address of a null terminated substring
// LR must contain returning address.
// ALL AAPCS registers are preserved.
// Results returned in x0.

.global String_endWith    // sets starting point of subroutine

.text

String_endWith:
    STR x19, [SP, #-16]!    // PUSH
    STR x20, [SP, #-16]!    // PUSH
    STR x21, [SP, #-16]!    // PUSH

    STR x30, [SP, #-16]!    // PUSH LR

    MOV x19, x0        // copy string
    MOV x20, x1        // copy substring

    BL String_length    // string.length()

    MOV x21, x0        // x21 = string.length()

    MOV x0, x20        // x0 = suffix
    BL String_length    // suffix.length()

    SUB x21, x21, x0    // x21 = string - suffix

compare:
    LDRB w0, [x19, x21]    // load string[i]
    LDRB w1, [x20], #1    // load suffix[i]

    CMP w1, #0x00        // compare if suffix[i] = null
    B.EQ true        	// branch if true

    CMP w0, w1        	// compare string[i] and suffix[i]
    ADD x21, x21, #1    // x21 += 1
    B.EQ compare        // branch back to compare if match

// false
    MOV x0, #0        // x0 = 0 (false)
    B  finished        // branch to finished

true:
    MOV x0, #1        // x0 = 1 (true)

finished:
    LDR x30, [SP], #16    // POP

    LDR x21, [SP], #16    // POP
    LDR x20, [SP], #16    // POP
    LDR x19, [SP], #16    // POP

    RET LR            // Return
.end
